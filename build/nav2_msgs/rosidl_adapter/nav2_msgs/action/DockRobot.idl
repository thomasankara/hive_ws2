// generated from rosidl_adapter/resource/action.idl.em
// with input from nav2_msgs/action/DockRobot.action
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Duration.idl"
#include "geometry_msgs/msg/PoseStamped.idl"

module nav2_msgs {
  module action {
    @verbatim (language="comment", text=
      "goal definition")
    struct DockRobot_Goal {
      @verbatim (language="comment", text=
        "Whether to use the dock_id or dock_pose fields")
      @default (value=TRUE)
      boolean use_dock_id;

      @verbatim (language="comment", text=
        "Dock name or ID to dock at, from given dock database")
      string dock_id;

      @verbatim (language="comment", text=
        "Dock pose")
      geometry_msgs::msg::PoseStamped dock_pose;

      @verbatim (language="comment", text=
        "If using dock_pose, what type of dock it is. Not necessary if only using one type of dock.")
      string dock_type;

      @verbatim (language="comment", text=
        "Maximum time for navigation to get to the dock's staging pose.")
      @default (value=1000.0)
      float max_staging_time;

      @verbatim (language="comment", text=
        "Whether or not to navigate to staging pose or assume robot is already at staging pose within tolerance to execute behavior")
      @default (value=TRUE)
      boolean navigate_to_staging_pose;
    };
    module DockRobot_Result_Constants {
      @verbatim (language="comment", text=
        "Error codes" "\n"        "Note: The expected priority order of the errors should match the message order")
      const uint16 NONE = 0;
      const uint16 DOCK_NOT_IN_DB = 901;
      const uint16 DOCK_NOT_VALID = 902;
      const uint16 FAILED_TO_STAGE = 903;
      const uint16 FAILED_TO_DETECT_DOCK = 904;
      const uint16 FAILED_TO_CONTROL = 905;
      const uint16 FAILED_TO_CHARGE = 906;
      const uint16 TIMEOUT = 907;
      const uint16 UNKNOWN = 999;
    };
    @verbatim (language="comment", text=
      "result definition")
    struct DockRobot_Result {
      @verbatim (language="comment", text=
        "docking success status")
      @default (value=TRUE)
      boolean success;

      @verbatim (language="comment", text=
        "Contextual error code, if any")
      @default (value=0)
      uint16 error_code;

      @verbatim (language="comment", text=
        "Number of retries attempted")
      @default (value=0)
      uint16 num_retries;

      string error_msg;
    };
    module DockRobot_Feedback_Constants {
      const uint16 NONE = 0;
      const uint16 NAV_TO_STAGING_POSE = 1;
      const uint16 INITIAL_PERCEPTION = 2;
      const uint16 CONTROLLING = 3;
      const uint16 WAIT_FOR_CHARGE = 4;
      const uint16 RETRY = 5;
    };
    @verbatim (language="comment", text=
      "feedback definition")
    struct DockRobot_Feedback {
      @verbatim (language="comment", text=
        "Current docking state")
      uint16 state;

      @verbatim (language="comment", text=
        "Docking time elapsed")
      builtin_interfaces::msg::Duration docking_time;

      @verbatim (language="comment", text=
        "Number of retries attempted")
      @default (value=0)
      uint16 num_retries;
    };
  };
};
